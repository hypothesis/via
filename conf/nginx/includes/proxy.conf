# Proxy to the URL that's given in the path.
#
# For example if the request is:
#
# GET https://via.hypothes.is/proxy/static/https://example.com/foo.pdf
#
# Then proxy to https://example.com/foo.pdf, returning foo.pdf to the browser.

# Pass the server name through when connecting to proxied HTTPS servers.
# I think this is needed to make proxying of some sites work.
# http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_ssl_server_name
proxy_ssl_server_name on;

# Pass our abuse policy in request headers for third-party site admins.
#
# https://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_set_header
proxy_set_header "X-Abuse-Policy" "https://web.hypothes.is/abuse-policy/";
proxy_set_header "X-Complaints-To" "https://web.hypothes.is/report-abuse/";

# Remove the query params from the URI so we can add them back again later.
#
# We need to strip the query params from URLs as that we can unconditionally
# re-add them in the proxy_pass below.
#
# The `break` is necessary to cause nginx to stop processing at the end of this
# `location { ... }` and send the `proxy_pass`'d response back to the browser,
# rather than re-starting its processing using the rewritten $uri to search for
# a matching `location { ... }` again.
#
# http://nginx.org/en/docs/http/ngx_http_rewrite_module.html#rewrite
# http://nginx.org/en/docs/http/ngx_http_rewrite_module.html#break
rewrite ^(.*)$ $1? break;

# Proxy to the resulting $uri (after all the `rewrite`s above).
#
# Query params have been stripped from $uri so re-add them with $is_args$args.
#
# http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_pass
# http://nginx.org/en/docs/http/ngx_http_core_module.html#var_is_args
# http://nginx.org/en/docs/http/ngx_http_core_module.html#var_args
proxy_pass $uri$is_args$args;
