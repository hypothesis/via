# Require the request to be signed with an MD5 and expiration in the URL,
# responding with an error if the request isn't signed.
#
# This uses nginx's built-in secure link module:
#
# https://www.nginx.com/blog/securing-urls-secure-link-module-nginx-plus/
# http://nginx.org/en/docs/http/ngx_http_secure_link_module.html

# Give nginx's secure link module the checksum ($sec) and expiration time
# ($exp) to verify.
#
# $sec and $exp are extracted from the requested URI by the `location` regex in nginx.conf.
#
# http://nginx.org/en/docs/http/ngx_http_secure_link_module.html#secure_link
secure_link $sec,$exp;

# Replace the $uri variable (which is URL-decoded) with the raw version from $request_uri.
# http://nginx.org/en/docs/http/ngx_http_rewrite_module.html#rewrite
rewrite ^ $request_uri;

# Remove the /proxy/static/<SEC>/<EXP> prefix from the $uri, we don't need it anymore.
# (And we do need easy access to $uri without the prefix because
# that's the third-party URL that we need to proxy.)
# http://nginx.org/en/docs/http/ngx_http_rewrite_module.html#rewrite
rewrite ^/proxy/static/[^/]+/[^/]+/(.*)$ $1;

# The string that we expect the MD5 digest in the URL ($sec) to be a hash of:
#
#   $secure_link_expires is the timestamp in the URL (the same as $exp)
#   $uri is the URL to be proxied
#   $nginx_secure_link_secret comes from the NGINX_SECURE_LINK_SECRET environment variable
#
# http://nginx.org/en/docs/http/ngx_http_secure_link_module.html#secure_link_md5
secure_link_md5 "/proxy/static/$secure_link_expires/$uri $nginx_secure_link_secret";

# $secure_link will be set to:
#
#   "" if the MD5 digest in the URL ($sec) is missing or wrong
#   "0" if the digest is valid but the timestamp in the URL ($exp) has expired
#   "1" if both the digest and the timestamp are valid

# If the MD5 digest is missing or invalid respond with a 403.
if ($secure_link = "") { return 403; }

# If the expiry time has passed respond with a 410.
if ($secure_link = "0") { return 410; }
