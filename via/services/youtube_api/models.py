from dataclasses import dataclass, field
from typing import List, Optional

from via.services.youtube_api._nested_data import safe_get


@dataclass
class CaptionTrack:
    """A source of transcription data, in a particular language."""

    language_code: str
    """Original language of the track."""

    name: Optional[str] = None
    """Human set name for the track."""

    kind: Optional[str] = None
    """Is this track automatically generated by audio to text AI?"""

    label: Optional[str] = None
    """Human readable name (determined by language + name)."""

    base_url: Optional[str] = None
    """URL to download the original language text (as XML)."""

    @classmethod
    def from_v1_json(cls, data: dict):
        """Create an instance from a `captionTrack` section of JSON."""

        label = data["name"]["simpleText"]

        return CaptionTrack(
            name=label.split(" - ", 1)[-1] if " - " in label else None,
            language_code=data["languageCode"].lower(),
            label=label,
            kind=data.get("kind", None),
            base_url=data["baseUrl"],
        )

    @property
    def is_auto_generated(self) -> bool:
        """Get whether this caption track auto generated."""

        return self.kind == "asr"


@dataclass
class Captions:
    """All information about captions."""

    tracks: List[CaptionTrack] = field(default_factory=list)
    """Available tracks to pick from."""

    @classmethod
    def from_v1_json(cls, data: dict):
        """Create an instance from JSON.

        This is populated from the `captions.playerCaptionsTracklistRenderer`
        section.
        """

        return Captions(
            tracks=[
                CaptionTrack.from_v1_json(track)
                for track in data.get("captionTracks", [])
            ]
        )


@dataclass
class Video:
    """Data for a video in YouTube."""

    caption: Optional[Captions] = None
    """Caption related information (tracks and languages)."""

    @classmethod
    def from_v1_json(cls, data):
        return Video(
            caption=Captions.from_v1_json(
                safe_get(data, ["captions", "playerCaptionsTracklistRenderer"], {})
            )
        )
